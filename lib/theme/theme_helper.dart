import 'package:flutter/material.dart';
import 'package:seba_s_application1/core/utils/size_utils.dart';

import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.green600,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.onPrimaryContainer,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(26.h),
          ),
          shadowColor: colorScheme.onPrimary,
          elevation: 12,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyMedium: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 14.fSize,
          fontFamily: 'Cairo',
          fontWeight: FontWeight.w200,
        ),
        bodySmall: TextStyle(
          color: colorScheme.onError,
          fontSize: 12.fSize,
          fontFamily: 'Cairo',
          fontWeight: FontWeight.w200,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 24.fSize,
          fontFamily: 'Cairo',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray600,
          fontSize: 12.fSize,
          fontFamily: 'Cairo',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: appTheme.black90001,
          fontSize: 20.fSize,
          fontFamily: 'Cairo',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray500,
          fontSize: 16.fSize,
          fontFamily: 'Cairo',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 14.fSize,
          fontFamily: 'Cairo',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF68CE62),
    primaryContainer: Color(0XFF363644),
    secondaryContainer: Color(0XFFAFB4FF),

    // Error colors
    errorContainer: Color(0XFF4AC443),
    onError: Color(0XFFF6F8FF),

    // On colors(text colors)
    onPrimary: Color(0X0F222C5C),
    onPrimaryContainer: Color(0XFFFFFFFF),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  Color get black900 => Color(0XFF040415);

  // Blackf
  Color get black9003f => Color(0X3F000000);

  // BlueGray
  Color get blueGray100 => Color(0XFFCDCDD0);
  Color get blueGray50 => Color(0XFFEAECF0);

  // Gray
  Color get gray50 => Color(0XFFF6F8FF);
  Color get gray500 => Color(0XFF9B9BA1);
  Color get gray600 => Color(0XFF686873);

  // Green
  Color get green400 => Color(0XFF68CE62);

  // Indigof
  Color get indigo9000f => Color(0X0F222C5C);

  // Indigo
  Color get indigoA200 => Color(0XFF6B73FF);
  Color get indigoA700 => Color(0XFF000DFF);

  // Red
  Color get red400 => Color(0XFFE3524F);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);

  // Amber
  Color get amberA400 => Color(0XFFFFCA00);
  Color get amberA700 => Color(0XFFFEA800);

  // Black
  Color get black90001 => Color(0XFF000000);

  // BlueGray
  Color get blueGray400 => Color(0XFF878EA8);

  // BlueGrayf
  Color get blueGray7003f => Color(0X3F3F526C);

  // Gray
  Color get gray200 => Color(0XFFF0E7E7);

  // Green
  Color get green300 => Color(0XFF84EC7E);
  Color get green600 => Color(0XFF3BA935);
  Color get green900 => Color(0XFF124917);

  // Indigo
  Color get indigo50 => Color(0XFFEBECFF);
  Color get indigo5001 => Color(0XFFD7D9FF);

  // Orange
  Color get orange50 => Color(0XFFFFF3DA);

  // Red
  Color get red200 => Color(0XFFEF9C9A);
  Color get red50 => Color(0XFFFFF3F3);
  Color get gray800 => Color(0XFF363644);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
